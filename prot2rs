#!/bin/bash
SCRIPTDIR="$(dirname "$0")"
CONF_FILE="${SCRIPTDIR}/pbpro.conf"

_usage(){
    echo
    echo "$(basename "${0}")"
    echo "Query ProTrack with pbprotracktor to gather PBCore data, transform it, and push it to ResourceSpace."
    echo "Usage: $(basename ${0}) [ -d /path/to/deliver/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -F DATE or Negative Integer (update ResourceSpace's records updated after the DATE provided (in YYYY-MM-DD form) or provide a negative number to update records updated within the past number of specified days)"
    echo "  -f DATE or Negative Integer (update ProTrack's records updated after the DATE provided (in YYYY-MM-DD form) or provide a negative number to update records updated within the past number of specified days)"
    echo "  -t ( sets up a featured collection based on today's date )"
    echo "  -h ( display this help )"
    echo
exit
}

_maketemp(){
    mktemp -q "/tmp/$(basename "${0}").XXXXXX"
    if [ "${?}" -ne 0 ]; then
        echo "${0}: Can't create temp file, exiting..."
        _writeerrorlog "_maketemp" "was unable to create the temp file, so the script had to exit."
        exit 1
    fi
}

if [ ! -f "${CONF_FILE}" ] ; then
    echo "A configuration file is needed."
    echo "Please edit ${CONF_FILE}"
    echo "PROTRACK_DB_URL=" > "${CONF_FILE}"
    echo "PROTRACK_DB_USER=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_HOST=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_NAME=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_USER=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_PW=" >> "${CONF_FILE}"
    exit 1
fi

. "${CONF_FILE}" || { echo "Missing ${CONF_FILE}. Exiting." ; exit 1 ;};

OPTIND=1
while getopts ":f:F:th" OPT ; do
    case "${OPT}" in
        f) FROM_DATE_PT="${OPTARG}";;
        F) FROM_DATE_RS="${OPTARG}";;
        t) MAKETODAY="Y";;
        h) _usage;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; _writeerrorlog "makeyoutube" "The option selected required an argument and none was provided. The script had to exit." ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

TEMPXML=$(_maketemp)
TEMPPBCORE=$(_maketemp)

if [[ "${FROM_DATE_PT:0:1}" = "-" ]] ; then
    FROM_DATE_PT=$(date -j -v"${FROM_DATE_PT}"d "+%Y-%m-%d %H:%M:%S")
fi
if [[ "${FROM_DATE_RS:0:1}" = "-" ]] ; then
    FROM_DATE_RS=$(date -j -v"${FROM_DATE_RS}"d "+%Y-%m-%d %H:%M:%S")
fi

_query_protrack_push_to_resourcespace(){
    MEDIAID="${1}"
    echo -n "Working on ${MEDIAID}"
    RESULTS="$(mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT COUNT(ref) FROM resource WHERE archive != '3' and field8='${MEDIAID}' ;" 2> /dev/null)"
    echo -n ", found ${RESULTS} record(s) in resourcespace"
    if [ "${RESULTS}" = 0 ] ; then
        echo ", skipping"
    else
    "${SCRIPTDIR}/pbprotracktor" "${MEDIAID}" > "${TEMPXML}"
    xml val "${TEMPXML}" >/dev/null
    if [ "${?}" != "0" ] ; then
        echo "pbprotracktor did not return a result for ${MEDIAID}, skipping."
        continue
    fi
    SERIESTITLE=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -t -v "//p:pbcoreDescriptionDocument[1]/p:pbcoreTitle[@titleType='Series'][1]" "${TEMPXML}")
    if [ -n "${SERIESTITLE}" ] ; then
        COLLECTION_ID=$(mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT ref FROM collection WHERE name = '$(printf "%q" "${SERIESTITLE}")' LIMIT 1 ;")
    fi
    if [[ -z "${COLLECTION_ID}" ]] ; then
        mysql -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "INSERT INTO collection  (name,public,theme,created,user,allow_changes) VALUES('$(printf "%q" "${SERIESTITLE}")',1,'Series',now(),3,1)" ;
        COLLECTION_ID=$(mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT ref FROM collection WHERE name = '$(printf "%q" "${SERIESTITLE}")' LIMIT 1 ;")
    fi
    xsltproc --nonet --stringparam id "${MEDIAID}" --stringparam collectionid "${COLLECTION_ID}" "${SCRIPTDIR}/pbcore2resourcespace.xsl" "${TEMPXML}" > "${TEMPPBCORE}"
    if [ -s "${TEMPXML}" ] ; then
        curl --data-urlencode "xml@${TEMPPBCORE}" http://respace.cunytv.lan/plugins/remoteimport/pages/update_unsafe.php
        echo
    else
        echo "Metadata about $MEDIAID is unavailable."
    fi
    if [ -f "${TEMPXML}" ] ;then
        rm "${TEMPXML}"
    fi
    fi
}

_catalog_airings(){
    CATALOGDATE="${1}"
    DATECOLLECTION=$(mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT ref FROM collection WHERE name = '$(printf "%q" "${CATALOGDATE}")' LIMIT 1 ;")
    if [[ -z "${DATECOLLECTION}" ]] ; then
        mysql -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "INSERT INTO collection  (name,public,theme,created,user,allow_changes,home_page_publish,home_page_text) VALUES('$(printf "%q" "${CATALOGDATE}")',1,'Broadcast Date',now(),3,1,1,'Broadcast ${CATALOGDATE}')" ;
        DATECOLLECTION=$(mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT ref FROM collection WHERE name = '$(printf "%q" "${CATALOGDATE}")' LIMIT 1 ;")
    fi
    psql -Ath "$PROTRACK_DB_URL" -U "$PROTRACK_DB_USER" -P pager=off -d protrack -c "SELECT CASE WHEN li_material_id is not null THEN trim(li_material_id) ELSE trim(fi_video_src) END FROM prog_log LEFT JOIN linkinfo ON li_vsn_id = prog_log.log_vsn_id LEFT JOIN filler ON fi_serial = prog_log.log_fi_id WHERE log_start_inst BETWEEN '2017-01-20' AND '2017-01-21' AND log_type !='SI' AND log_type != 'AZ'" | sort -u | while read id ; do
        MEDIAREF=$(mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT ref from resource WHERE field8 = '"${id}"' AND archive = '0' LIMIT 1")
        ALREADYUPDATED=$(mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT date_added FROM collection_resource WHERE collection = '${DATECOLLECTION}' AND resource = '${MEDIAREF}'")
        if [[ -z "$ALREADYUPDATED" ]] && [[ ! -z "${MEDIAREF}" ]] ; then
            mysql -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "INSERT INTO collection_resource (collection,resource) VALUES("${DATECOLLECTION}","${MEDIAREF}")" ;
        fi
    done
}

if [[ "${MAKETODAY}" = "Y" ]]; then
    _catalog_airings "$(date "+%Y-%m-%d")"
    _catalog_airings "$(date -j -v+1d "+%Y-%m-%d")"
fi

if [[ -n "${FROM_DATE_PT}" ]] ; then
    psql -Ath "$PROTRACK_DB_URL" -U "$PROTRACK_DB_USER" -P pager=off -d protrack -c "SELECT fi_video_src FROM filler AS f LEFT JOIN notes AS n ON n.no_parent = f.fi_serial WHERE f.up_date BETWEEN '${FROM_DATE_PT}' AND '3000-01-01' OR n.up_date BETWEEN '${FROM_DATE_PT}' AND '3000-01-01'" | while read MEDIAID ; do
        _query_protrack_push_to_resourcespace "${MEDIAID}"
    done
    psql -Ath "$PROTRACK_DB_URL" -U "$PROTRACK_DB_USER" -P pager=off -d protrack -c "SELECT li_material_id FROM linkinfo LEFT JOIN quad_tab ON linkinfo.li_vsn_id = quad_tab.vsn_serial WHERE linkinfo.up_date BETWEEN '${FROM_DATE_PT}' AND '3000-01-01'" | while read MEDIAID ; do
        _query_protrack_push_to_resourcespace "${MEDIAID}"
    done
elif [[ -n "${FROM_DATE_RS}" ]] ; then
    mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT field8 FROM resource WHERE archive!='3' and creation_date BETWEEN '${FROM_DATE_RS}' AND '3000-01-01'" | while read MEDIAID ; do
        _query_protrack_push_to_resourcespace "${MEDIAID}"
    done
else
while [ "${*}" != "" ] ; do
    MEDIAID="${1}"
    shift
    _query_protrack_push_to_resourcespace "${MEDIAID}"
done
fi
