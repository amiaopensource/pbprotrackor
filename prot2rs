#!/bin/bash
SCRIPTDIR="$(dirname "$0")"
CONF_FILE="${SCRIPTDIR}/pbpro.conf"

# pbcore 2 resourcespace mapping
# fields prefixed with 'PBCORE_' will be mapped from PBCore to ResourceSpace as HTML table contents
# thus for those fields, in resourcespace, the display templates should be set up like:
# <div class="Description"><table><tr><th>Type</th><th>Description</th></tr>  [value]</table></div>
# and the contents pushed in will be like <tr><td>Abstract</td><td>Some video</td></tr><tr><td>Transcript</td><td>Hey!</td></tr>
PBCORE_ASSETTYPE_FIELD=77
PBCORE_ASSETDATE_FIELD=82
PBCORE_IDENTIFIER_FIELD=78
PBCORE_TITLE_FIELD=111
PBCORE_TITLE_SERIES_FIELD=73
PBCORE_TITLE_EPISODE_FIELD=76
PBCORE_DESCRIPTION_FIELD=84
PBCORE_COVERAGE_FIELD=93
PBCORE_CREATOR_FIELD=86
PBCORE_CONTRIBUTOR_FIELD=90
PBCORE_PUBLISHER_FIELD=91
PBCORE_INSTANTIATION_FIELD=116
LAST_UPDATED_FIELD=109

_usage(){
    echo
    echo "$(basename "${0}")"
    echo "Query ProTrack with pbprotracktor to gather PBCore data, transform it, and push it to ResourceSpace."
    echo "Usage: $(basename ${0}) [ -d /path/to/deliver/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -F DATE or Negative Integer (update ResourceSpace's records updated after the DATE provided (in YYYY-MM-DD form) or provide a negative number to update records updated within the past number of specified days)"
    echo "  -f DATE or Negative Integer (update ProTrack's records updated after the DATE provided (in YYYY-MM-DD form) or provide a negative number to update records updated within the past number of specified days)"
    echo "  -t ( sets up a featured collection based on today's date )"
    echo "  -h ( display this help )"
    echo
exit
}

urlencode() {
    # urlencode <string>
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C
    TEXT=$(echo "$1" | sed 's|"|\\\\\\"|g')
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${TEXT:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done
    LC_COLLATE=$old_lc_collate
}

_maketemp(){
    mktemp -q "/tmp/$(basename "${0}").XXXXXX"
    if [ "${?}" -ne 0 ]; then
        echo "${0}: Can't create temp file, exiting..."
        _writeerrorlog "_maketemp" "was unable to create the temp file, so the script had to exit."
        exit 1
    fi
}

_remove_empty_xml_nodes(){
    xml ed -d '//*[not(./*) and (not(./text()) or normalize-space(./text())="")]'
}

# resourcespace API functions
_search(){
    query="user=${user}&function=do_search&param1=${1}&param2=&param3=resourceid&param4=0"
    sign=$(printf '%s' "${private_key}${query}" | sha256deep)
    curl -# "http://respace.cunytv.lan/api/?$query&sign=${sign}" | jq -r '.[] | select (.field8=="'"${1}"'") | .ref' 2>/dev/null
}

_search_public_collections(){
    query="user=${user}&function=search_public_collections&param1=&param2=ref&param3=ASC&param4=false&param5=false"
    sign=$(printf '%s' "${private_key}${query}" | sha256deep)
    curl -# "http://respace.cunytv.lan/api/?$query&sign=${sign}" | jq -r '.[] | select (.name=="'"${1}"'") | .ref'
}

_create_collection(){
    query="user=${user}&function=create_collection&param1=${1}"
    sign=$(printf '%s' "${private_key}${query}" | sha256deep)
    curl -# "http://respace.cunytv.lan/api/?$query&sign=${sign}"
}

_add_resource_to_collection(){
    query="user=${user}&function=add_resource_to_collection&param1=${1}&param2=${2}";
    sign=$(printf '%s' "${private_key}${query}" | sha256deep)
    curl -# "http://respace.cunytv.lan/api/?$query&sign=${sign}"
}

_updatefield(){
    query="user=${user}&function=update_field&param1=${1}&param2=${2}&param3=$(urlencode "$3")"
    sign=$(printf '%s' "${private_key}${query}" | sha256deep)
    curl -# "http://respace.cunytv.lan/api/?$query&sign=${sign}"
}

if [ ! -f "${CONF_FILE}" ] ; then
    echo "A configuration file is needed."
    echo "Please edit ${CONF_FILE}"
    echo "PROTRACK_DB_URL=" > "${CONF_FILE}"
    echo "PROTRACK_DB_USER=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_HOST=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_NAME=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_USER=" >> "${CONF_FILE}"
    echo "RESOURCESPACE_DB_PW=" >> "${CONF_FILE}"
    echo "# for resourcespace api"
    echo "private_key=" >> "${CONF_FILE}"
    echo "user=" >> "${CONF_FILE}"
    exit 1
fi

. "${CONF_FILE}" || { echo "Missing ${CONF_FILE}. Exiting." ; exit 1 ;};

OPTIND=1
while getopts ":f:F:th" OPT ; do
    case "${OPT}" in
        f) FROM_DATE_PT="${OPTARG}";;
        F) FROM_DATE_RS="${OPTARG}";;
        t) MAKETODAY="Y";;
        h) _usage;;
        *) echo "bad option -${OPTARG}" ; _usage ;;
        :) echo "Option -${OPTARG} requires an argument" ; _writeerrorlog "makeyoutube" "The option selected required an argument and none was provided. The script had to exit." ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

if [[ "${FROM_DATE_PT:0:1}" = "-" ]] ; then
    FROM_DATE_PT=$(date -j -v"${FROM_DATE_PT}"d "+%Y-%m-%d %H:%M:%S")
fi
if [[ "${FROM_DATE_RS:0:1}" = "-" ]] ; then
    FROM_DATE_RS=$(date -j -v"${FROM_DATE_RS}"d "+%Y-%m-%d %H:%M:%S")
fi

_query_protrack_push_to_resourcespace(){
    MEDIAID="${1}"
    echo -n "Working on ${MEDIAID}"
    RESULTS="$(_search "${MEDIAID}" 2>/dev/null)"
    if [[ -z "${RESULTS}" ]] ; then
        echo ", not found in resourcespace, skipping."
    else
        REF=$(echo "${RESULTS}" | head -n 1)
        echo ", found $(echo "${RESULTS}" | awk 'END{print NR}' ) record(s) in resourcespace (ref=$REF)"
        TEMPXML=$(_maketemp)
        "${SCRIPTDIR}/pbprotracktor" "${MEDIAID}" | _remove_empty_xml_nodes 2> /dev/null > "${TEMPXML}"
        xml val "${TEMPXML}" >/dev/null
        if [ "${?}" != "0" ] ; then
            echo "pbprotracktor did not return a result for ${MEDIAID}, skipping."
            continue
        fi
        SERIESTITLE=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -t -v "//p:pbcoreDescriptionDocument[1]/p:pbcoreTitle[@titleType='Series'][1]" "${TEMPXML}")
        if [ -n "${SERIESTITLE}" ] ; then
            COLLECTION_ID=$(_search_public_collections "${SERIESTITLE}")
        fi
        if [[ -z "${COLLECTION_ID}" ]] ; then
            mysql -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "INSERT INTO collection  (name,public,theme,created,user,allow_changes) VALUES('$(printf "%q" "${SERIESTITLE}")',1,'Series',now(),3,1)" ;
            COLLECTION_ID=$(_search_public_collections "${SERIESTITLE}")
        fi
        _add_resource_to_collection "${REF}" "${COLLECTION_ID}"
        # upload asset type
        UPLOAD_ASSETTYPE=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbccoreAssetType -o "<tr><td>" -v . -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_ASSETTYPE_FIELD}" "${UPLOAD_ASSETTYPE}"
        # upload asset date
        UPLOAD_ASSETDATE=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreAssetDate -o "<tr><td>" -v @dateType -o "</td><td>" -v . -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_ASSETDATE_FIELD}" "${UPLOAD_ASSETDATE}"
        # upload in
        UPLOAD_IDENTIFIERS=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreIdentifier -o "<tr><td>" -v @source -o "</td><td>" -v . -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_IDENTIFIER_FIELD}" "${UPLOAD_IDENTIFIERS}"
        # upload title info
        UPLOAD_TITLES=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument/p:pbcoreTitle -o "<tr><td>" -v @titleType -o "</td><td>" -v . -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_TITLE_FIELD}" "${UPLOAD_TITLES}"
        # upload title series
        UPLOAD_TITLE_SERIES=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument -o "<tr><td>" -v "p:pbcoreTitle[@titleType='Series']|p:pbcoreTitle[@titleType='Program']" -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_TITLE_SERIES_FIELD}" "${UPLOAD_TITLE_SERIES}"
        # upload title episode
        UPLOAD_TITLE_EPISODE=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument -o "<tr><td>" -v "p:pbcoreTitle[@titleType='Episode']|p:pbcoreTitle[@titleType='Interstitial']" -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_TITLE_EPISODE_FIELD}" "${UPLOAD_TITLE_EPISODE}"
        # upload description info
        UPLOAD_DESCRIPTIONS=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument/p:pbcoreDescription -o "<tr><td>" -v @descriptionType -o "</td><td>" -v . -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_DESCRIPTION_FIELD}" "${UPLOAD_DESCRIPTIONS}"
        # upload coverage info
        UPLOAD_COVERAGE=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument/p:pbcoreCoverage -o "<tr><td>" -v @coverageType -o "</td><td>" -v . -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_COVERAGE_FIELD}" "${UPLOAD_COVERAGE}"
        # upload creator info
        UPLOAD_CREATORS=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument/p:pbcoreCreator -o "<tr><td>" -v @creatorRole -o "</td><td>" -v p:creator -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_CREATOR_FIELD}" "${UPLOAD_CREATORS}"
        # upload contributor info
        UPLOAD_CONTRIBUTORS=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument/p:pbcoreContributor -o "<tr><td>" -v @contributorRole -o "</td><td>" -v p:contributor -o "</td><td>" -v p:contributor/@affiliation -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_CONTRIBUTOR_FIELD}" "${UPLOAD_CONTRIBUTORS}"
        # upload publisher info
        UPLOAD_PUBLISHERS=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreDescriptionDocument/p:pbcorePublisher -o "<tr><td>" -v @publisherRole -o "</td><td>" -v p:publisher -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_PUBLISHER_FIELD}" "${UPLOAD_PUBLISHERS}"
        # upload interstitial info
        UPLOAD_INSTANTIATION=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreInstantiation -o "<tr><td>" -m p:instantiationIdentifier -o "<table><tr><td>" -v @source -o "</td><td>" -v . -o "</td></tr>" -b -o "</table></td><td>" -v p:instantiationTimeStart -o "</td><td>" -v p:instantiationDuration -o "</td></tr>" "${TEMPXML}")
        _updatefield "${REF}" "${PBCORE_INSTANTIATION_FIELD}" "${UPLOAD_INSTANTIATION}"
    
        # provide last updated info
        UPLOAD_LASTUPDATE=$(xml sel -N p="http://www.pbcore.org/PBCore/PBCoreNamespace.html" -T -t -m //p:pbcoreCollection -v @collectionDate "${TEMPXML}")
        _updatefield "${REF}" "${LAST_UPDATED_FIELD}" "${UPLOAD_LASTUPDATE}"
        if [ -f "${TEMPXML}" ] ;then
            rm "${TEMPXML}"
        fi
    fi
}

_catalog_airings(){
    CATALOGDATE="${1}"
    DATECOLLECTION=$(_search_public_collections "${CATALOGDATE}")
    if [[ -z "${DATECOLLECTION}" ]] ; then
        mysql -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "INSERT INTO collection  (name,public,theme,created,user,allow_changes,home_page_publish,home_page_text) VALUES('$(printf "%q" "${CATALOGDATE}")',1,'Broadcast Date',now(),3,1,1,'Broadcast ${CATALOGDATE}')" ;
        DATECOLLECTION=$(_search_public_collections "${CATALOGDATE}")
    fi
    psql -Ath "$PROTRACK_DB_URL" -U "$PROTRACK_DB_USER" -P pager=off -d protrack -c "SELECT CASE WHEN li_material_id is not null THEN trim(li_material_id) ELSE trim(fi_video_src) END FROM prog_log LEFT JOIN linkinfo ON li_vsn_id = prog_log.log_vsn_id LEFT JOIN filler ON fi_serial = prog_log.log_fi_id WHERE log_start_inst BETWEEN '${CATALOGDATE}' AND '$(date -j -f "%Y-%m-%d" -v+1d "${CATALOGDATE}" "+%Y-%m-%d")' AND log_type !='SI' AND log_type != 'AZ'" | sort -u | while read id ; do
        MEDIAREF=$(_search "${id}")
        if [[ ! -z "${MEDIAREF}" ]] ; then
            echo "Adding ${id} with ref id of ${MEDIAREF} to ${CATALOGDATE} with ref id of ${DATECOLLECTION}"
            _add_resource_to_collection "${MEDIAREF}" "${DATECOLLECTION}"
        else
            echo NOT uploading "$MEDIAREF"
        fi
    done
}

if [[ "${MAKETODAY}" = "Y" ]]; then
    _catalog_airings "$(date "+%Y-%m-%d")"
    _catalog_airings "$(date -j -v+1d "+%Y-%m-%d")"
fi

if [[ -n "${FROM_DATE_PT}" ]] ; then
    psql -Ath "$PROTRACK_DB_URL" -U "$PROTRACK_DB_USER" -P pager=off -d protrack -c "SELECT fi_video_src FROM filler AS f LEFT JOIN notes AS n ON n.no_parent = f.fi_serial WHERE f.up_date BETWEEN '${FROM_DATE_PT}' AND '3000-01-01' OR n.up_date BETWEEN '${FROM_DATE_PT}' AND '3000-01-01'" | while read MEDIAID ; do
        _query_protrack_push_to_resourcespace "${MEDIAID}"
    done
    psql -Ath "$PROTRACK_DB_URL" -U "$PROTRACK_DB_USER" -P pager=off -d protrack -c "SELECT li_material_id FROM linkinfo LEFT JOIN quad_tab ON linkinfo.li_vsn_id = quad_tab.vsn_serial WHERE linkinfo.up_date BETWEEN '${FROM_DATE_PT}' AND '3000-01-01'" | while read MEDIAID ; do
        _query_protrack_push_to_resourcespace "${MEDIAID}"
    done
elif [[ -n "${FROM_DATE_RS}" ]] ; then
    mysql -BNr -h "${RESOURCESPACE_DB_HOST}" -u "${RESOURCESPACE_DB_USER}" -p"${RESOURCESPACE_DB_PW}" -D "${RESOURCESPACE_DB_NAME}" -e "SELECT field8 FROM resource WHERE archive!='3' and creation_date BETWEEN '${FROM_DATE_RS}' AND '3000-01-01'" | while read MEDIAID ; do
        if [[ "${MEDIAID}" != "NULL" ]] && [[ "${MEDIAID}" != "" ]] ; then
            _query_protrack_push_to_resourcespace "${MEDIAID}"
        fi
    done
else
    while [ "${*}" != "" ] ; do
        MEDIAID="${1}"
        shift
        _query_protrack_push_to_resourcespace "${MEDIAID}"
    done
    echo
fi
